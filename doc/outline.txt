# -----------------------------------------------------------------------------
# Open questions
# -----------------------------------------------------------------------------



# -----------------------------------------------------------------------------
# Program
# -----------------------------------------------------------------------------


- Class for an Ising lattice
  - elements: lattice, lattice_size, energy, magnetization, temperature, RNG
  - RNG for the probability of a flip and the initial lattice -> uniform and RNG to sample the spin (could we use the same?)
  - types:
    - double T = temperature
    - int M = magnetization
    - int E = energy
    - int L = lattice size
    - vector<vector<int>> lattice = lattice (size = (L+1)x(L+1), padded with 0)
  - needed functions:
    - generate random lattice
    - calculate energy of lattice
    - calculate magnetization of lattice
    - flip (execution and probability)
    - calculate energy change after flip
    - calculate magnetization change after flip
  - members:
    - GenerateLattice(L, T) (random lattice + energy + magnetization)
    - Flip() (probability + execution + energy + magnetization)
    - lattice() returns unpadded lattice

- Header
  - contains T and L
  - WriteHeader(lattice, datafile)

# -----------------------------------------------------------------------------
# Open questions
# -----------------------------------------------------------------------------


- How does the metropolis algorithm work?
We randomly choose a point on the lattice and change its spin. If this decreases the energy, than we always accept it. If it increases the energy we accept it with probability exp(-\DeltaE/T). For small T this value is small and we seldom flip a spin. If it is big however this probability becomes very big and we often flip in "worse" states.

- What are we interested in?
We are mostly interested in M, the magnetization, defined by M = \sum_i s_i, where s_i is the spin at position i.

- Which data do we need?
We need the magnetization for different temperatures and lattice-sizes, as well as the CPU-time. So in a header, there should be the used temperature and lattice-size.

- How is T_c defined and where is it?
T_c is the critical temperature, where the magnetization of the equilibrium-state changes. For T < T_c the system always reaches full order, so M is at its maximum. Around T_c there is a transition and for T > T_c the system is unordered and M is around 0. The critical temperature is around T_c = 2.2 * J.

- How should the correlation look?
For T > T_c there should be no correlation, since the m just randomly oscillates around 0.
For T < T_c we have to discern between the transient and the stationary process.
For the stationary process it should be 0, because it again randomly oscillates, but around 1 instead of 0. For the transient, there should be a correlation. Since the system starts around 0 and increases to |m|=1, so at every successive time steps the |m| is in the average bigger. This means, that the correlations should be constant.
If we take the autocorrelation over the complete time, than we can't just superimpose them. For very long times it should be around 0, but before that it has to have a finite value. For increasingly large correlation times we get increasingly more stationarity in our transient, so it approaches 0. This means it should be something like a decaying function (linear, exponential, whatever).
